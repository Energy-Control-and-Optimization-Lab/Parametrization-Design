"""
BEMIO post-processing module for BEM data (MATLAB)
Author: Pablo Antonio Matamala Carvajal
Date: 2025-07-21
"""

import os
import subprocess

def run_bemio_postprocessing(nc_path, output_directory=None, bemio_script_path=None, 
                           radiation_time=60, excitation_time=157, state_space_option=1.9,
                           verbose=True):
    """
    Run BEMIO post-processing using MATLAB
    
    Parameters:
    -----------
    nc_path : str
        Complete path to .nc file generated by Capytaine
    output_directory : str, optional
        Directory for BEMIO results. If None, uses nc_path directory
    bemio_script_path : str, optional
        Path to custom bemio.m script. If None, uses internal script
    radiation_time : float, optional
        Time for radiation IRF (default: 60)
    excitation_time : float, optional
        Time for excitation IRF (default: 157)
    state_space_option : float, optional
        State space approximation parameter (default: 1.9)
    verbose : bool, optional
        Show detailed messages (default: True)
    
    Returns:
    --------
    bool : True if executed successfully, False otherwise
    """
    
    if output_directory is None:
        output_directory = os.path.dirname(nc_path)
    
    if verbose:
        print("Starting BEMIO post-processing...")
        print(f"  NC file: {nc_path}")
        print(f"  Output directory: {output_directory}")
    
    # Try MATLAB Engine API first
    if _run_with_matlab_engine(nc_path, output_directory, bemio_script_path, 
                              radiation_time, excitation_time, state_space_option, verbose):
        return True
    
    # If fails, try subprocess
    if _run_with_subprocess(nc_path, output_directory, bemio_script_path,
                           radiation_time, excitation_time, state_space_option, verbose):
        return True
    
    if verbose:
        print("❌ Could not run BEMIO with any method")
    return False

def _run_with_matlab_engine(nc_path, output_directory, bemio_script_path,
                           radiation_time, excitation_time, state_space_option, verbose):
    """
    Run BEMIO using MATLAB Engine API
    """
    try:
        import matlab.engine
        
        if verbose:
            print("Using MATLAB Engine API for BEMIO...")
        
        # Extract only .nc filename (without full path)
        nc_filename = os.path.basename(nc_path)
        
        # Create dynamic BEMIO script or use custom
        bemio_script_content = _generate_bemio_script(nc_filename, bemio_script_path,
                                                     radiation_time, excitation_time, 
                                                     state_space_option)
        
        # Create temporary bemio.m file in output directory
        bemio_temp_path = os.path.join(output_directory, 'bemio_temp.m')
        with open(bemio_temp_path, 'w') as f:
            f.write(bemio_script_content)
        
        # Start MATLAB engine
        eng = matlab.engine.start_matlab()
        
        # Change to working directory
        eng.cd(output_directory, nargout=0)
        
        # Run BEMIO script
        if verbose:
            print("Running BEMIO script in MATLAB...")
        
        eng.bemio_temp(nargout=0)
        
        # Close MATLAB engine
        eng.quit()
        
        # Clean temporary file
        if os.path.exists(bemio_temp_path):
            os.remove(bemio_temp_path)
        
        if verbose:
            print("✅ BEMIO post-processing completed successfully with Engine API")
            print(f"   BEMIO files saved in: {output_directory}")
        
        return True
        
    except ImportError:
        if verbose:
            print("⚠️  MATLAB Engine API not available")
        return False
    
    except Exception as e:
        if verbose:
            print(f"❌ Error running BEMIO with Engine API: {e}")
        return False

def _run_with_subprocess(nc_path, output_directory, bemio_script_path,
                        radiation_time, excitation_time, state_space_option, verbose):
    """
    Run BEMIO using subprocess as alternative
    """
    try:
        if verbose:
            print("Using subprocess for BEMIO...")
        
        # Extract only .nc filename
        nc_filename = os.path.basename(nc_path)
        
        # Create BEMIO script
        bemio_script_content = _generate_bemio_script(nc_filename, bemio_script_path,
                                                     radiation_time, excitation_time, 
                                                     state_space_option)
        
        # Add exit command at the end
        if 'exit' not in bemio_script_content.lower():
            bemio_script_content += '\nexit;\n'
        
        # Create temporary bemio file
        bemio_temp_path = os.path.join(output_directory, 'bemio_temp.m')
        with open(bemio_temp_path, 'w') as f:
            f.write(bemio_script_content)
        
        # Run MATLAB using subprocess
        if verbose:
            print("Running BEMIO with subprocess...")
        
        # Change to working directory
        original_dir = os.getcwd()
        os.chdir(output_directory)
        
        # Run MATLAB
        result = subprocess.run(['matlab', '-batch', 'bemio_temp'], 
                              capture_output=True, text=True, timeout=300)
        
        # Return to original directory
        os.chdir(original_dir)
        
        # Clean temporary file
        if os.path.exists(bemio_temp_path):
            os.remove(bemio_temp_path)
        
        if result.returncode == 0:
            if verbose:
                print("✅ BEMIO executed successfully with subprocess")
            return True
        else:
            if verbose:
                print(f"⚠️  BEMIO finished with code: {result.returncode}")
                if result.stderr:
                    print(f"   Error: {result.stderr}")
            return False
    
    except FileNotFoundError:
        if verbose:
            print("❌ MATLAB not found in system PATH")
            print("   Ensure MATLAB is installed and accessible from command line")
        return False
    
    except subprocess.TimeoutExpired:
        if verbose:
            print("⏱️  BEMIO exceeded time limit (5 minutes)")
        return False
    
    except Exception as e:
        if verbose:
            print(f"❌ Error running BEMIO with subprocess: {e}")
        return False

def _generate_bemio_script(nc_filename, bemio_script_path, radiation_time, 
                          excitation_time, state_space_option):
    """
    Generate BEMIO script content
    """
    
    # Use custom script if provided
    if bemio_script_path and os.path.exists(bemio_script_path):
        with open(bemio_script_path, 'r') as f:
            return f.read()
    
    # Default BEMIO script
    bemio_script_content = f"""% BEMIO script automatically generated
% File: {nc_filename}
% Date: {os.path.basename(__file__)}

hydro = struct();

% Read Capytaine data
hydro = readCAPYTAINE(hydro,'{nc_filename}');

% Calculate radiation impulse response functions
hydro = radiationIRF(hydro,{radiation_time},[],[],[],{state_space_option});

% State-space approximation for radiation
hydro = radiationIRFSS(hydro,[],[]);

% Calculate excitation impulse response functions
hydro = excitationIRF(hydro,{excitation_time},[],[],[],{state_space_option});

% Write HDF5 files for WEC-Sim
writeBEMIOH5(hydro);

% Generate plots
plotBEMIO(hydro);

% Show summary
fprintf('\\n=== BEMIO Post-processing completed ===\\n');
fprintf('Processed file: {nc_filename}\\n');
fprintf('Radiation IRF time: {radiation_time} s\\n');
fprintf('Excitation IRF time: {excitation_time} s\\n');
fprintf('===========================================\\n\\n');
"""
    
    return bemio_script_content

def check_bemio_availability():
    """
    Check if BEMIO is available on the system
    
    Returns:
    --------
    dict : Dictionary with availability information
    """
    availability = {
        'matlab_engine': False,
        'matlab_subprocess': False,
        'bemio_detected': False,
        'recommendations': []
    }
    
    # Check MATLAB Engine API
    try:
        import matlab.engine
        availability['matlab_engine'] = True
    except ImportError:
        availability['recommendations'].append(
            "Install MATLAB Engine API: cd(fullfile(matlabroot,'extern','engines','python')); system('python setup.py install')"
        )
    
    # Check MATLAB subprocess
    try:
        result = subprocess.run(['matlab', '-batch', 'exit'], 
                              capture_output=True, timeout=30)
        availability['matlab_subprocess'] = result.returncode == 0
    except (FileNotFoundError, subprocess.TimeoutExpired):
        availability['recommendations'].append(
            "Ensure MATLAB is in system PATH"
        )
    
    # Check if BEMIO is in MATLAB path (requires MATLAB available)
    if availability['matlab_engine'] or availability['matlab_subprocess']:
        availability['recommendations'].append(
            "Verify BEMIO is installed and in MATLAB path"
        )
    
    return availability

if __name__ == "__main__":
    print("=== Eco_Bemio - BEMIO post-processing module ===\n")
    
    # Check availability
    availability = check_bemio_availability()
    print("System availability:")
    print(f"  MATLAB Engine API: {'✅' if availability['matlab_engine'] else '❌'}")
    print(f"  MATLAB Subprocess: {'✅' if availability['matlab_subprocess'] else '❌'}")
    
    if availability['recommendations']:
        print("\nRecommendations:")
        for rec in availability['recommendations']:
            print(f"  - {rec}")
    
    print("\nTo use this module:")
    print("  from Eco_Bemio import run_bemio_postprocessing")
    print("  success = run_bemio_postprocessing('path/to/file.nc')")
